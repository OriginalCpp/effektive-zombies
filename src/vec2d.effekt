module vec2d

record Vec2d(x: Double, y: Double)

val NULL_VECTOR = Vec2d(0.0, 0.0)

def infixAdd(vec1: Vec2d, vec2: Vec2d): Vec2d = Vec2d(vec1.x + vec2.x, vec1.y + vec2.y)

def normalize(vec: Vec2d): Vec2d = {
  val length = sqrt(vec.x * vec.x + vec.y * vec.y)
  if (length != 0.0) Vec2d(vec.x / length, vec.y / length) else NULL_VECTOR
}

def infixMul(vec: Vec2d, scalar: Int): Vec2d = scalar * vec

def infixMul(scalar: Int, vec: Vec2d): Vec2d = scalar.toDouble() * vec

def infixMul(vec: Vec2d, scalar: Double) = scalar * vec

def infixMul(scalar: Double, vec: Vec2d): Vec2d = Vec2d(scalar * vec.x, scalar * vec.y)

def equals(vec1: Vec2d, vec2: Vec2d): Bool = (vec1.x == vec2.x) && (vec1.y == vec2.y)

def show(vec: Vec2d) = "Vec2d(" ++ show(vec.x) ++ ", " ++ show(vec.y) ++ ")"