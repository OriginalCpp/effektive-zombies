module main

import src/ffi
import src/vec2d
import src/map

val KEY_DOWN = "keydown"
val KEY_UP = "keyup"
val DEFAULT_CANVAS_WIDTH = 1280.0
val DEFAULT_CANVAS_HEIGHT = 720.0

type Color {
  Green()
  Red()
  Black()
}

def toString(color: Color): String = color match {
  case Green() => "green"
  case Red()   => "red"
  case Black() => "black"
}

type Drawable {
  Rect(pos: Vec2d, width: Int, height: Int, color: Color)
  Circle(pos: Vec2d, radius: Int, color: Color)
}

type GameObject {
  Player(hitbox: Drawable)
}

record Game(player: GameObject)

def getHitbox(object: GameObject): Drawable = object match {
  case Player(hitbox) => hitbox
}

interface Canvas {
  def get(): Node
  def draw(object: GameObject): Unit
  def drawD(drawable: Drawable): Unit
  def clear(): Unit
}

def canvas[T] { function: () => T / {Canvas} }: T = {
  try {
    function()
  } with Canvas {
    def get = resume(getElementById("canvas").getOrElse { 
      createCanvas(DEFAULT_CANVAS_WIDTH, DEFAULT_CANVAS_HEIGHT) 
    })
    def draw(object) = canvas { do drawD(object.getHitbox()); resume(()) }
    def drawD(drawable) = {
      canvas { 
        drawable match {
          case Rect(pos, width, height, color) => 
            drawRect(do get(), pos.x, pos.y, width, height, color.toString())
          case Circle(pos, radius, color) => 
            drawCircle(do get(), pos.x, pos.y, radius, color.toString())
        } 
      }
      resume(())
    }
    def clear = {
      canvas { clear(do get()) }
      resume(())
    }
  }
}

def move(drawable: Drawable, dVec: Vec2d): Drawable = drawable match {
  case Rect(pos, w, h, c) => Rect(pos + dVec, w, h, c)
  case Circle(pos, r, c) => Circle(pos + dVec, r, c)
}

def getAxisMovement(keyMap: Map[String, Bool], minusKey: String, plusKey: String): Double = {
  val minus: Double = keyMap.get(minusKey).getOrElse{false}.toDouble()
  val plus: Double = keyMap.get(plusKey).getOrElse{false}.toDouble()
  -1.0 * minus + plus
}

def assembleMovement(keyMap: Map[String, Bool], speed: Double): Vec2d = {
  val x = keyMap.getAxisMovement("a", "d")
  val y = keyMap.getAxisMovement("w", "s")
  normalize(Vec2d(x, y)) * speed
}

def constructGun(playerHitbox: Drawable): Drawable = {
  val (playerSize, playerCenter) = playerHitbox match {
    case Rect(pos, w, h, _) =>
      (max(w, h).toDouble(), pos + Vec2d((w / 2).toDouble(), (h / 2).toDouble()))
    case Circle(pos, r, _) => (r.toDouble() * 2.0, pos)
  }
  val GUN_WIDTH  = playerSize / 2.0
  val GUN_HEIGTH = GUN_WIDTH / 3.0
  val GUN_POS = playerCenter + Vec2d(playerSize * 0.5 - 1.0, -0.5 * GUN_HEIGTH)
  val GUN = Rect(GUN_POS, GUN_WIDTH.toInt(), GUN_HEIGTH.toInt(), Black())
  GUN
}

type Event = String

def main(): Unit = {
  val CANVAS_WIDTH = clientWidth()
  val CANVAS_HEIGHT = clientHeight()
  val CANVAS_CENTER = Vec2d(CANVAS_WIDTH / 2.0, CANVAS_HEIGHT / 2.0)
  createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT)

  val PLAYER_SIZE = CANVAS_HEIGHT / 15.0
  val PLAYER_START_POS = CANVAS_CENTER + -0.5 * Vec2d(PLAYER_SIZE, PLAYER_SIZE)
  val PLAYER_SPEED = 0.4
  val START_PLAYER = Player(Circle(PLAYER_START_POS, PLAYER_SIZE.toInt(), Green()))

  val game = ref[Game](Game(START_PLAYER))

  val keysPressed = emptyMap[String, Bool]()
  val now = ref[Int](getTime())

  def move(object: GameObject, dt: Int): GameObject = object match {
    case Player(hitbox) => 
      Player(hitbox.move(dt * keysPressed.assembleMovement(PLAYER_SPEED)))
  }

  def calcDt(): Int = {
    val timeElapsed = getTime() - now.get()
    now.set(getTime())
    timeElapsed
  }

  def render(deadline: IdleDeadline): Unit = {
    val dt = calcDt()
    val player = game.get.player
    val movedPlayer = player.move(dt)
    val gun = constructGun(movedPlayer.getHitbox())
    canvas {
      do clear()
      do draw(movedPlayer)
      do drawD(gun)
    }
    game.set(Game(movedPlayer))
    requestIdleCallback(render)
  }

  def pressedHandler(event: Event): Unit = keysPressed.update(event, true)
  def releasedHandler(event: Event): Unit = keysPressed.update(event, false)

  addEventListener(KEY_DOWN, pressedHandler)
  addEventListener(KEY_UP, releasedHandler)
  requestIdleCallback(render)
}