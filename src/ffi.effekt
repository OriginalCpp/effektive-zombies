module ffi

extern def toDouble(b: Bool): Double = 
  js "(function() { if (${b}) { return 1; } else { return 0; }})()"

extern type Node

extern io def unsafeGetElementById(id: String): Node =
  jsWeb "document.getElementById(${id})"

def getElementById(id: String): Option[Node] = {
  val unsafeElement = unsafeGetElementById(id)
  undefinedToOption(unsafeElement)
}

extern type Event

extern io def addEventListener(eventType: String, callback: Event => Unit at {io, global}): Unit =
  jsWeb """document.addEventListener(${eventType}, 
           (event) => $effekt.runToplevel((ks, k) => ${callback}(event, ks, k)))"""

extern pure def getKey(event: Event): String =
  jsWeb "${event}.key"

extern io def getClientX(event: Event): Double = 
  jsWeb "${event}.clientX"

extern io def getClientY(event: Event): Double =
  jsWeb "${event}.clientY"

extern io def getButton(event: Event): Int =
  jsWeb "${event}.button"


extern io def createCanvas(width: Double, height: Double): Node =
  jsWeb """(function(){
  canvas = document.createElement("canvas");
  canvas.setAttribute("id", "canvas")
  canvas.setAttribute("width", ${width})
  canvas.setAttribute("height", ${height})
  document.body.appendChild(canvas)
  return canvas;
  })()
  """

extern io def drawRect(
  canvas: Node, x: Double, y: Double, 
  width: Double, height: Double, color: String
): Unit =
  jsWeb """ctx = ${canvas}.getContext("2d");
           ctx.fillStyle = ${color}; 
           ctx.fillRect(${x}, ${y}, ${width}, ${height});"""

extern io def drawCircle(canvas: Node, x: Double, y: Double, radius: Double, color: String): Unit =
  jsWeb """ctx = ${canvas}.getContext("2d");
           ctx.fillStyle = ${color};
           ctx.beginPath();
           ctx.arc(${x}, ${y}, ${radius}, 0, 2 * Math.PI);
           ctx.fill();"""

extern io def clear(canvas: Node): Unit = 
  jsWeb """ctx = ${canvas}.getContext("2d");
           w = ${canvas}.width;
           h = ${canvas}.height;
           ctx.clearRect(0, 0, w, h)"""

extern io def drawText(
  canvas: Node, text: String,
  x: Double, y: Double, font: String, 
  alignment: String, baseline: String, color: String
): Unit =
  jsWeb """ctx = ${canvas}.getContext("2d");
           ctx.font = ${font};
           ctx.textAlign = ${alignment};
           ctx.textBaseline = ${baseline};
           ctx.fillStyle = ${color};
           ctx.fillText(${text}, ${x}, ${y})"""

//Sets up the transformation matrix to rotate all later drawn shapes clockwise by the given angle 
//relative to the given coordinates
extern io def setupRotation(canvas: Node, angle: Double, relativeToX: Double, relativeToY: Double): Unit =
  jsWeb """ctx = ${canvas}.getContext("2d");
           ctx.translate(${relativeToX}, ${relativeToY});
           ctx.rotate(${angle});
           ctx.translate(-${relativeToX}, -${relativeToY});"""

extern type DOMMatrix

extern io def getTransform(canvas: Node): DOMMatrix = 
  jsWeb """ctx = ${canvas}.getContext("2d");
           ctx.getTransform();"""

extern io def setTransform(canvas: Node, matrix: DOMMatrix): Unit =
  jsWeb """ctx = ${canvas}.getContext("2d");
           ctx.setTransform(${matrix});"""

extern type IdleDeadline

extern io def requestIdleCallback(callback: (IdleDeadline) => Unit at {io, global}): Unit =
  jsWeb "window.requestIdleCallback(deadline => $effekt.runToplevel((ks, k) => ${callback}(deadline, ks, k)))"

extern io def getTime(): Int = jsWeb "Date.now()"

extern io def clientWidth(): Double = jsWeb "document.documentElement.clientWidth"

extern io def clientHeight(): Double = jsWeb "document.documentElement.clientHeight"