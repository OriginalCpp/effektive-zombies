module main

import mutable/map
import src/drawable/hitbox
import src/drawable/manipulated
import src/drawable/simple
import src/drawable/image
import src/game/constants
import src/game/game
import src/game/gameobject
import src/game/gamestate
import src/game/player
import src/game/score
import src/ffi
import src/drawable/text
import src/utils
import src/vec2d

def main(): Unit = {
  createCanvas(GAME_WIDTH, GAME_HEIGHT)
  val (dW, dH) = fittingSizes(windowWidth(), windowHeight()) 
  val displayedWidth = ref[Int](dW)
  val displayedHeight = ref[Int](dH)
  val ctx = ref[Context2D](resizeCanvas(displayedWidth.get, displayedHeight.get))

  val game = ref[GameState](START_GAME)

  val keysPressed = emptyMap[String, Bool]()
  val mousePos = ref[Vec2d](NULL_VECTOR)
  val lastFrameTimeStamp = ref[Int](getTime())

  def timeSinceLastFrame(): Int = {
    val now = getTime()
    val timeElapsed = now - lastFrameTimeStamp.get()
    lastFrameTimeStamp.set(now)
    timeElapsed
  }

  val loadedImages = imagesToLoad.map { 
    case (key, path) => (key, loadImage(path)) 
  }

  def idleCallback(deadline: IdleDeadline): Unit = {
    try {
      val dt = timeSinceLastFrame()
      val updatedGame = game.get.update(dt) 
      render(updatedGame)
      game.set(updatedGame)
    } with Canvas {
      def draw(drawable) = {
        def drawSimple(d: SimpleDrawable): Unit = d match {
          case Rect(upperLeft, width, height, color) =>
            ctx.get.drawRect(
              upperLeft.x.toInt, upperLeft.y.toInt, 
              width.toInt, height.toInt, show(color)
            )
          case Circle(center, radius, color) =>
            ctx.get.drawCircle(
              center.x.toInt, center.y.toInt, radius.toInt, show(color)
            )
        }

        def unwrapDraw(d: ManipulatedDrawable): Unit = d match {
          case Simple(inner) => drawSimple(inner)
          case Rotate(inner, rotation, relativeTo) =>
            val oldMatrix = ctx.get.getTransform()
            val realRelative = relativeTo.getOrElse { inner.getCenter() }
            ctx.get.setupRotation(rotation, realRelative.x.toInt, realRelative.y.toInt)
            unwrapDraw(inner)
            ctx.get.setTransform(oldMatrix)
          case Compose(first, second) =>
            unwrapDraw(first); unwrapDraw(second)
        }
        unwrapDraw(drawable)
        resume(())
      }
      def write(text) = {
        ctx.get.drawText(
          text.text, text.position.x.toInt, text.position.y.toInt,
          show(text.fontSizePX) ++ "px " ++ show(text.fontType), 
          show(text.alignment), show(text.baseline), show(text.color)
        )
        resume(())
      }
      def drawImageWithName(imageName, pos) = {
        with on[MissingValue].report
        val loadedImage = loadedImages.Immutable::get(imageName)
        if (loadedImage.isLoaded()) {
          ctx.get.drawImage(
            loadedImage,
            pos.x.toInt,
            pos.y.toInt
          )
        }
        resume(())
      }
      def clear = { ctx.get.clear(); resume(()) }
    } with Input {
      def isPressed(key) = resume(keysPressed.get(key).getOrElse { false })
      def mousePos() = resume(mousePos.get)
    } with random {
      resume(random())
    }
    
    requestIdleCallback(idleCallback)
  }

  def pressedHandler(event: Event): Unit = 
    keysPressed.update(event.getKey(), true)
  def releasedHandler(event: Event): Unit = 
    keysPressed.update(event.getKey(), false)

  def mouseMoveHandler(event: Event): Unit = {
    val mousePosInWindow = Vec2d(event.getClientX(), event.getClientY())
    val displayedSizes = fromInt(displayedWidth.get, displayedHeight.get)
    val canvasOriginRelativeToWindow = Vec2d(
      (windowWidth().toDouble - displayedSizes.x) / 2.0,
      (windowHeight().toDouble - displayedSizes.y) / 2.0
    )
    val xRatio = GAME_WIDTH.toDouble / displayedSizes.x
    val yRatio = GAME_HEIGHT.toDouble / displayedSizes.y
    val mousePosInGame = 
      (mousePosInWindow - canvasOriginRelativeToWindow) * Vec2d(xRatio, yRatio)
    mousePos.set(mousePosInGame)
  }
  def mouseDownHandler(event: Event): Unit = 
    keysPressed.update(LEFT_CLICK, event.getButton() == 0)

  def mouseUpHandler(event: Event): Unit =
    keysPressed.update(LEFT_CLICK, event.getButton() != 0)

  def resizeHandler(event: Event): Unit = {
    val (newWidth, newHeight) = fittingSizes(windowWidth(), windowHeight())
    displayedWidth.set(newWidth)
    displayedHeight.set(newHeight)
    ctx.set(resizeCanvas(newWidth, newHeight))
  }

  addEventListener(KEY_DOWN, pressedHandler)
  addEventListener(KEY_UP, releasedHandler)
  addEventListener(MOUSE_MOVE, mouseMoveHandler)
  addEventListener(MOUSE_DOWN, mouseDownHandler)
  addEventListener(MOUSE_UP, mouseUpHandler)
  addEventListener(RESIZE, resizeHandler)

  requestIdleCallback(idleCallback)
}