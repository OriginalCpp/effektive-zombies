module game/constants

import src/game/score
import src/game/gamestate
import src/game/gametimer
import src/game/player
import src/drawable/simple
import src/drawable/manipulated
import src/drawable/text
import src/utils
import src/vec2d

val ASPECT_RATIO = 16.0 / 9.0

def fittingSizes(width: Int, height: Int): (Int, Int) = {
  if(height.toDouble * ASPECT_RATIO > width.toDouble) {
    (width, (width.toDouble / ASPECT_RATIO).toInt)
  } else {
    ((height.toDouble * ASPECT_RATIO).toInt, height)
  }
}

val GAME_WIDTH = 768
val GAME_HEIGHT = (GAME_WIDTH.toDouble / ASPECT_RATIO).toInt()
val GAME_CENTER = fromInt(GAME_WIDTH / 2, GAME_HEIGHT / 2)

val SECOND_IN_MS = 1000

//------------------- Events -------------------
val KEY_DOWN = "keydown"
val KEY_UP = "keyup"
val MOUSE_MOVE = "mousemove"
val MOUSE_DOWN = "mousedown"
val RESIZE = "resize"

//------------------- GameState -------------------
val CANVAS_PLAYER_FACTOR = 15.0
val PLAYER_START_SPEED = GAME_WIDTH.toDouble / (3 * SECOND_IN_MS).toDouble
val PLAYER_START_HEALTH = 2
val PLAYER_GUN_FACTOR = 1.2
val GUN_WIDTH_HEIGHT_FACTOR = 3.0
val PLAYER_SIZE = GAME_HEIGHT.toDouble() / CANVAS_PLAYER_FACTOR
val PLAYER_START_POS = GAME_CENTER
val PLAYER_HITBOX = Circle(PLAYER_START_POS, PLAYER_SIZE, Green())
val GUN_WIDTH  = PLAYER_SIZE / PLAYER_GUN_FACTOR
val GUN_HEIGTH = GUN_WIDTH / GUN_WIDTH_HEIGHT_FACTOR
val GUN_START_POS = PLAYER_START_POS + Vec2d(PLAYER_SIZE - 1.0, -0.5 * GUN_HEIGTH)
val GUN = Rect(GUN_START_POS, GUN_WIDTH, GUN_HEIGTH, Black())
val START_PLAYER = Player(
  PLAYER_HITBOX,
  GUN,
  PLAYER_START_HEALTH, 
  PLAYER_START_SPEED
)

val BULLET_SPEED = GAME_WIDTH.toDouble / SECOND_IN_MS.toDouble

val CANVAS_ZOMBIE_FACTOR = CANVAS_PLAYER_FACTOR
val ZOMBIE_BASE_SPEED = GAME_WIDTH.toDouble / (10 * SECOND_IN_MS).toDouble

val START_WAVE = 1
val START_WAVE_TIMER = 10

val ZOMBIE_SPAWN_INTERVAL = 1 * SECOND_IN_MS

val START_SCORE = Score(0, 0, 0)

val START_TIMERS = GameTimer(
  Timer(ZOMBIE_SPAWN_INTERVAL),
  Timer(START_WAVE_TIMER)
)

val START_GAME = GameState(START_PLAYER, [], START_TIMERS, START_WAVE, START_SCORE)

//------------------- UI -------------------

val SCORE_DIGITS = 6
val DIGIT_WIDTH = 16
val SCORE_WIDTH = 4 * 16
val SCORE_POS = fromInt(GAME_WIDTH - SCORE_WIDTH - SCORE_DIGITS * DIGIT_WIDTH, 0)

val WAVE_DIGITS = 2
val WAVE_WIDTH = 16
val WAVE_POS = NULL_VECTOR

val COMBO_WIDTH = 16
val COMBO_HEIGHT = 16
val COMBO_POS = fromInt(GAME_WIDTH, GAME_HEIGHT) - fromInt(COMBO_WIDTH, COMBO_HEIGHT)

val HEART_WIDTH = 16
val HEART_HEIGHT = 16
val HEART_PADDING = 4
val LIFE_POS = fromInt(0, GAME_HEIGHT - HEART_HEIGHT)

type Path = String
val ASSET_PATH = "../assets/"
val NUMBER_PATH = ASSET_PATH ++ "numbers/"
val SCORE_KEY = "score"
val COMBO_KEY = "combo"
val WAVE_KEY = "wave"
val HEART_KEY = "heart"
val ZERO_KEY = "0"
val ONE_KEY = "1"
val TWO_KEY = "2"
val THREE_KEY = "3"
val FOUR_KEY = "4"
val FIVE_KEY = "5"
val SIX_KEY = "6"
val SEVEN_KEY = "7"
val EIGHT_KEY = "8"
val NINE_KEY = "9"
val imagesToLoad = Immutable::emptyMap[String, Path]()
                  .Immutable::update(SCORE_KEY, "score.png")
                  .Immutable::update(COMBO_KEY, "head.png")
                  .Immutable::update(WAVE_KEY, "wave.png")
                  .Immutable::update(HEART_KEY, "heart.png")
                  .Immutable::update(ZERO_KEY, "digit/0.png")
                  .Immutable::update(ONE_KEY, "digit/1.png")
                  .Immutable::update(TWO_KEY, "digit/2.png")
                  .Immutable::update(THREE_KEY, "digit/3.png")
                  .Immutable::update(FOUR_KEY, "digit/4.png")
                  .Immutable::update(FIVE_KEY, "digit/5.png")
                  .Immutable::update(SIX_KEY, "digit/6.png")
                  .Immutable::update(SEVEN_KEY, "digit/7.png")
                  .Immutable::update(EIGHT_KEY, "digit/8.png")
                  .Immutable::update(NINE_KEY, "digit/9.png")
                  .map { case (k, p) => (k, ASSET_PATH ++ p)}
val DEATH_BACKGROUND = 
  Simple(Rect(NULL_VECTOR, GAME_WIDTH.toDouble, GAME_HEIGHT.toDouble, Black()))

val YOU_DIED_OFFSET = GAME_HEIGHT / 8 
val YOU_DIED_SIZE = GAME_HEIGHT / 9 
val YOU_DIED = Text(
  "You Died",
  GAME_CENTER - fromInt(0, YOU_DIED_OFFSET),
  YOU_DIED_SIZE,
  Serif(),
  Center(),
  Bottom(),
  Red()
)
val CANVAS_RETRY_WIDTH_FACTOR = 4.0
val CANVAS_RETRY_HEIGHT_FACTOR = 6.0
val RETRY_BUTTON_WIDTH = GAME_WIDTH.toDouble / CANVAS_RETRY_WIDTH_FACTOR
val RETRY_BUTTON_HEIGHT = GAME_HEIGHT.toDouble / CANVAS_RETRY_HEIGHT_FACTOR
val RETRY_BUTTON_CENTER = GAME_CENTER + fromInt(0, 50)
val RETRY_BUTTON = Rect(
  NULL_VECTOR, RETRY_BUTTON_WIDTH,
  RETRY_BUTTON_HEIGHT, Green()
).centerAt(RETRY_BUTTON_CENTER)

val RETRY_TEXT_WIDTH = 256.0 / CANVAS_RETRY_HEIGHT_FACTOR
val RETRY_TEXT = Text(
  "Retry", RETRY_BUTTON_CENTER, RETRY_TEXT_WIDTH.toInt(), 
  Serif(), Center(), Middle(), White()
)