module main

import src/ffi
import src/map

val KEY_DOWN = "keydown"
val KEY_UP = "keyup"
val DEFAULT_CANVAS_WIDTH = 1280.0
val DEFAULT_CANVAS_HEIGHT = 720.0

type Color {
  Green()
  Red()
}

def toString(color: Color): String = color match {
  case Green() => "green"
  case Red()   => "red"
}

type Drawable {
  Rect(pos: Vec2d, width: Int, height: Int, color: Color)
  Circle(pos: Vec2d, radius: Int, color: Color)
}

type GameObject {
  Player(hitbox: Drawable)
}

def getHitbox(object: GameObject): Drawable = object match {
  case Player(hitbox) => hitbox
}

interface Canvas {
  def get(): Node
  def draw(object: GameObject): Unit
  def clear(): Unit
}

def canvas[T] { function: () => T / {Canvas} }: T = {
  try {
    function()
  } with Canvas {
    def get = resume(getElementById("canvas").getOrElse { 
      createCanvas(DEFAULT_CANVAS_WIDTH, DEFAULT_CANVAS_HEIGHT) 
    })
    def draw(object) = {
      canvas { 
        object.getHitbox() match {
          case Rect(pos, width, height, color) => 
            drawRect(do get(), pos.x, pos.y, width, height, color.toString())
          case _ => ()
        } 
      }
      resume(())
    }
    def clear = {
      canvas { clear(do get()) }
      resume(())
    }
  }
}

def move(drawable: Drawable, dVec: Vec2d): Drawable = drawable match {
  case Rect(pos, w, h, c) => Rect(pos + dVec, w, h, c)
  case Circle(pos, r, c) => Circle(pos + dVec, r, c)
}

def getAxisMovement(keyMap: Map[String, Bool], minusKey: String, plusKey: String): Double = {
  val minus: Double = keyMap.get(minusKey).getOrElse{false}.toDouble()
  val plus: Double = keyMap.get(plusKey).getOrElse{false}.toDouble()
  -1.0 * minus + plus
}

def assembleMovement(keyMap: Map[String, Bool], speed: Double): Vec2d = {
  val x = keyMap.getAxisMovement("a", "d")
  val y = keyMap.getAxisMovement("w", "s")
  normalize(Vec2d(x, y)) * speed
}

type Event = String

def main(): Unit = {
  val CANVAS_WIDTH = clientWidth()
  val CANVAS_HEIGHT = clientHeight()
  val CANVAS_CENTER = Vec2d(CANVAS_WIDTH / 2.0, CANVAS_HEIGHT / 2.0)
  createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT)

  val PLAYER_WIDTH = 100
  val PLAYER_HEIGHT = 100
  val PLAYER_SPEED = 0.4
  val player = Player(
    Rect(CANVAS_CENTER + -0.5 * Vec2d(PLAYER_WIDTH.toDouble(), PLAYER_HEIGHT.toDouble()), 
    PLAYER_WIDTH, PLAYER_HEIGHT, Green())
  )
  val objects = ref[List[GameObject]]([player])

  val keysPressed = emptyMap[String, Bool]()
  val now = ref[Int](getTime())

  def move(object: GameObject, dt: Int): GameObject = object match {
    case Player(hitbox) => 
      Player(hitbox.move(dt * keysPressed.assembleMovement(PLAYER_SPEED)))
  }

  def calcDt(): Int = {
    val timeElapsed = getTime() - now.get()
    now.set(getTime())
    timeElapsed
  }

  def render(deadline: IdleDeadline): Unit = {
    val dt = calcDt()
    val objs = objects.get
    val movedObjs = objs.map { obj => obj.move(dt) }
    canvas {
      do clear()
      movedObjs.foreach { obj => do draw(obj) }
    }
    objects.set(movedObjs)
    requestIdleCallback(render)
  }

  def pressedHandler(event: Event): Unit = keysPressed.update(event, true)
  def releasedHandler(event: Event): Unit = keysPressed.update(event, false)

  addEventListener(KEY_DOWN, pressedHandler)
  addEventListener(KEY_UP, releasedHandler)
  requestIdleCallback(render)
}