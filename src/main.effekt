module main

import src/ffi
import src/vec2d
import mutable/map

val KEY_DOWN = "keydown"
val KEY_UP = "keyup"
val MOUSE_MOVE = "mousemove"
val MOUSE_DOWN = "mousedown"
val DEFAULT_CANVAS_WIDTH = 1280.0
val DEFAULT_CANVAS_HEIGHT = 720.0

type Color {
  Green()
  Red()
  Black()
}

def toString(color: Color): String = color match {
  case Green() => "green"
  case Red()   => "red"
  case Black() => "black"
}

type SimpleDrawable {
  Rect(upperLeft: Vec2d, width: Int, height: Int, color: Color)
  Circle(pos: Vec2d, radius: Int, color: Color)
}

type Hitbox {
  //c1, c3 and c2, c4 are opposite corners
  HRect(c1: Vec2d, c2: Vec2d, c3: Vec2d, c4: Vec2d)
  HCircle(pos: Vec2d, radius: Int)
  HCompose(h1: Hitbox, h2: Hitbox)
}

def getCenter(h: Hitbox): Vec2d = h match {
  case HRect(c1, c2, c3, c4) => c1 + (c1 - c3) * 0.5
  case HCircle(pos, _) => pos
  case HCompose(h1, h2) => h1.getCenter()
}

def rotate(h: Hitbox, angle: Double, relativeTo: Option[Vec2d]): Hitbox = {
  val relat = relativeTo.getOrElse { h.getCenter() }
  h match {
    case HRect(c1, c2, c3, c4) =>
      HRect(
        c1.rotate(angle, relat), 
        c2.rotate(angle, relat),
        c3.rotate(angle, relat),
        c4.rotate(angle, relat)
      )
    case HCircle(pos, radius) => HCircle(pos.rotate(angle, relat), radius)
    case HCompose(h1, h2) => 
      HCompose(h1.rotate(angle, relativeTo), h2.rotate(angle, relativeTo))
  }
}

def toHitbox(d: SimpleDrawable): Hitbox = d match {
  case Rect(uL, w, h, _) => 
    HRect(uL, uL + fromInt(w, 0), uL + fromInt(w, h), uL + fromInt(0, h))
  case Circle(pos, r, _) => HCircle(pos, r)
}

def collides(h1: Hitbox, h2: Hitbox): Bool = h1 match {
  case HRect(c1, c2, c3, c4) =>
    [c1, c2, c3, c4].any { p =>
      p.isInside(h2)
    }
  case HCircle(pos, r) => h2 match {
    case HRect(c1, c2, c3, c4) =>
      [c1, c2, c3, c4].any { p =>
        p.isInside(h1)
    }
    case HCircle(pos2, r2) =>
      length(pos - pos2) < max(r, r2).toDouble()
    case HCompose(first, second) =>
      collides(h1, first) || collides(h1, second)
  }
  case HCompose(first, second) =>
    collides(first, h2) || collides(second, h2)
}

def isInside(vec: Vec2d, hitbox: Hitbox): Bool = hitbox match {
  case HRect(c1, c2, c3, c4) =>
    //make rect axis aligned and c1 the upperLeft corner
    val angle = (c1 - c2).angleClockwise()
    val uL = c1.rotate(angle, NULL_VECTOR)
    val lR = c3.rotate(angle, NULL_VECTOR)
    val rotatedPoint = vec.rotate(angle, NULL_VECTOR)
    (rotatedPoint > uL) && (rotatedPoint < lR)
  case HCircle(pos, r) => length(vec - pos) < r.toDouble()
  case HCompose(h1, h2) => vec.isInside(h1) || vec.isInside(h2)
}

def show(d: SimpleDrawable): String = d match {
  case Rect(uL, w, h, c) => 
    "Rect(" ++ [show(uL), show(w), show(h), c.toString()].mkString(", ") ++ ")"
  case Circle(pos, radius, color) =>
    "Circle(" ++ [show(pos), show(radius), color.toString()].mkString(", ") ++ ")"
}

def mkString(list: List[String], delim: String): String = list match {
  case Nil() => "" 
  case Cons(head, tail) => 
    def go(list: List[String]): String = list match {
      case Nil() => ""
      case Cons(head, tail) => delim ++ head ++ go(tail)
    } 
    head ++ go(tail)
}

type ManipulatedDrawable {
  Simple(drawable: SimpleDrawable)
  Rotate(inner: ManipulatedDrawable, rotation: Double, relativeTo: Option[Vec2d])
  Compose(first: ManipulatedDrawable, second: ManipulatedDrawable)
}

def toHitbox(d: ManipulatedDrawable): Hitbox = d match {
  case Simple(inner) => inner.toHitbox()
  case Rotate(inner, rotation, relativeTo) =>
    inner.toHitbox().rotate(rotation, relativeTo)
  case Compose(first, second) =>
    HCompose(first.toHitbox(), second.toHitbox())
}

def collapseRotations(d: ManipulatedDrawable): ManipulatedDrawable = d match {
  case Simple(inner) => Simple(inner)
  case Rotate(Rotate(inner, innerRotation, innerRelative), rotation, relativeTo) =>
    if (innerRelative.equals(relativeTo)) 
      Rotate(inner.collapseRotations(), innerRotation + rotation, relativeTo)
    else 
      Rotate(
        Rotate(inner, innerRotation, innerRelative).collapseRotations(), 
        rotation, relativeTo
      )
  case Rotate(inner, rotation, relativeTo) => 
    Rotate(inner.collapseRotations(), rotation, relativeTo)
  case Compose(first, second) => 
    Compose(first.collapseRotations(), second.collapseRotations())
}

def show(d: ManipulatedDrawable): String = d match {
  case Simple(inner) => "Simple(" ++ show(inner) ++ ")"
  case Rotate(inner, rotation, relativeTo) =>
    "Rotate(" ++ 
      [show(inner), show(rotation), show(relativeTo) { vec2d::show }].mkString(", ") 
    ++ ")"
  case Compose(first, second) =>
    "Compose(" ++ show(first) ++ ", " ++ show(second) ++ ")"
}

def changeColor(drawable: SimpleDrawable, to: Color): SimpleDrawable = drawable match {
  case Rect(uL, w, h, _) => Rect(uL, w, h, to)
  case Circle(p, r, _) => Circle(p, r, to)
}

def getCenter(drawable: SimpleDrawable): Vec2d = drawable match {
  case Rect(upperLeft, width, height, _) => 
    upperLeft + Vec2d(0.5 * width.toDouble(), 0.5 * height.toDouble())
  case Circle(pos, _, _) => pos
}

def getCenter(drawable: ManipulatedDrawable): Vec2d = drawable match {
  case Simple(inner) => inner.getCenter()
  case Rotate(inner, rotation, relativeTo) =>
    val innerCenter = inner.getCenter()
    val relat = relativeTo.getOrElse { () => innerCenter }
    innerCenter + rotate(innerCenter - relat, rotation)
  case Compose(first, second) => first.getCenter()
}

def collides(d1: ManipulatedDrawable, d2: ManipulatedDrawable): Bool =
  collides(d1.toHitbox(), d2.toHitbox())

record AABB(upperLeft: Vec2d, lowerRight: Vec2d)

def getAABB(drawable: SimpleDrawable): AABB = drawable match {
  case Rect(uL, width, height, _) => 
    AABB(uL, uL + fromInt(width, height))
  case Circle(center, radius, _) =>
    val shift = fromInt(radius, radius) 
    AABB(center - shift, center + shift)
}

type GameObject {
  Shot(drawable: ManipulatedDrawable, movementVector: Vec2d)
  Zombie(drawable: ManipulatedDrawable, movementVector: Vec2d)
}

def getCenter(object: GameObject): Vec2d = object match {
  case Shot(hitbox, _) => hitbox.getCenter()
  case Zombie(hitbox, _) => hitbox.getCenter()
}

def getHitbox(object: GameObject): ManipulatedDrawable = object match {
  case Shot(hitbox, _) => hitbox
  case Zombie(hitbox, _) => hitbox
}

record Window(width: Int, height: Int)

record Player(drawable: SimpleDrawable, gun: SimpleDrawable)

record Game(window: Window, player: Player, objects: List[GameObject])

def addObject(game: Game, gameObject: GameObject): Game = 
  Game(game.window, game.player, Cons(gameObject, game.objects))

type Side {
  Top()
  Right()
  Bottom()
  Left()
}

def chooseSide(leftRightSize: Int, topBottomSize: Int): Side = {
  val leftProbability = 
    leftRightSize.toDouble() / (2 * leftRightSize + 2 * topBottomSize).toDouble()
  val rightThreshold = leftProbability
  val topThreshold = 2.0 * rightThreshold
  val bottomThreshold = (1.0 - topThreshold) / 2.0 + topThreshold
  val random = random()
  val side = if (random > bottomThreshold) Bottom()
             else if (random > topThreshold) Top()
             else if (random > rightThreshold) Right()
             else Left()
  side
}

def spawnZombie(game: Game): Game = {
  val window = game.window
  val w = window.width
  val dW = w.toDouble()
  val h = window.height
  val dH = h.toDouble()
  val r = random()
  val zombiePos = chooseSide(h, w) match {
    case Right() => Vec2d(dW, r * dH)
    case Bottom() => Vec2d(r * dW, dH)
    case Left() => Vec2d(0.0, r * dH)
    case Top() => Vec2d(r * dW, 0.0)
  }
  val playerAABB = game.player.drawable.getAABB()
  val AABBSizes = playerAABB.lowerRight - playerAABB.upperLeft
  val zombieSize = (max(AABBSizes.x, AABBSizes.y) / 2.0).toInt()
  val zombie = Zombie(Simple(Circle(zombiePos, zombieSize, Black())), Vec2d(0.3, 0.0))
  game.addObject(zombie)
}

interface Canvas {
  def get(): Node
  def drawSimple(drawable: SimpleDrawable): Unit
  def draw(drawable: ManipulatedDrawable): Unit
  def clear(): Unit
}

def canvas[T] { function: () => T / {Canvas} }: T = {
  try {
    function()
  } with Canvas {
    def get = resume(getElementById("canvas").getOrElse { 
      createCanvas(DEFAULT_CANVAS_WIDTH, DEFAULT_CANVAS_HEIGHT) 
    })
    def drawSimple(drawable) = {
      canvas {
        drawable match {
          case Rect(upperLeft, width, height, color) => 
            drawRect(do get(), upperLeft.x, upperLeft.y, width, height, color.toString())
          case Circle(pos, radius, color) => 
            drawCircle(do get(), pos.x, pos.y, radius, color.toString())
        }
      }
      resume(())
    }
    def draw(drawable) = {
      canvas { 
        drawable match {
          case Simple(inner) => do drawSimple(inner)
          case Rotate(inner, rotation, relativeTo) =>
            val canvas = do get()
            val oldMatrix = canvas.getTransform()
            val realRelative = relativeTo.getOrElse { inner.getCenter() }
            canvas.setupRotation(rotation, realRelative.x, realRelative.y)
            do draw(inner)
            canvas.setTransform(oldMatrix)
          case Compose(first, second) =>
            do draw(first)
            do draw(second)
        } 
      }
      resume(())
    }
    def clear = {
      canvas { clear(do get()) }
      resume(())
    }
  }
}

def move(drawable: SimpleDrawable, dVec: Vec2d): SimpleDrawable = drawable match {
  case Rect(upperLeft, w, h, c) => Rect(upperLeft + dVec, w, h, c)
  case Circle(pos, r, c) => Circle(pos + dVec, r, c)
}

def move(drawable: ManipulatedDrawable, dVec: Vec2d): ManipulatedDrawable = drawable match {
  case Simple(inner) => Simple(inner.move(dVec))
  case Rotate(inner, angle, relativeTo) => 
    Rotate(inner.move(dVec), angle, relativeTo.map{v => v + dVec})
  case Compose(first, second) => Compose(first.move(dVec), second.move(dVec))
}

def move(gameObject: GameObject, dt: Int): GameObject = gameObject match {
  case Shot(hitbox, movementVector) => 
    Shot(hitbox.move(movementVector * dt), movementVector)
  case Zombie(hitbox, movementVector) =>
    Zombie(hitbox.move(movementVector * dt), movementVector)
}

def getAxisMovement(keyMap: Map[String, Bool], minusKey: String, plusKey: String): Double = {
  val minus: Double = keyMap.get(minusKey).getOrElse{false}.toDouble()
  val plus: Double = keyMap.get(plusKey).getOrElse{false}.toDouble()
  -1.0 * minus + plus
}

def assembleMovement(keyMap: Map[String, Bool], speed: Double): Vec2d = {
  val x = keyMap.getAxisMovement("a", "d")
  val y = keyMap.getAxisMovement("w", "s")
  normalize(Vec2d(x, y)) * speed
}

def main(): Unit = {
  val CANVAS_WIDTH = clientWidth()
  val CANVAS_HEIGHT = clientHeight()
  val CANVAS_CENTER = Vec2d(CANVAS_WIDTH / 2.0, CANVAS_HEIGHT / 2.0)
  createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT)
  val WINDOW = Window(CANVAS_WIDTH.toInt(), CANVAS_HEIGHT.toInt())

  val PLAYER_SIZE = CANVAS_HEIGHT / 15.0
  val PLAYER_SPEED = 0.4
  val PLAYER_START_POS = CANVAS_CENTER
  val PLAYER_HITBOX = Circle(PLAYER_START_POS, PLAYER_SIZE.toInt(), Green())

  val GUN_WIDTH  = PLAYER_SIZE / 1.2
  val GUN_HEIGTH = GUN_WIDTH / 3.0
  val GUN_START_POS = PLAYER_START_POS + Vec2d(PLAYER_SIZE - 1.0, -0.5 * GUN_HEIGTH)
  val GUN = Rect(GUN_START_POS, GUN_WIDTH.toInt(), GUN_HEIGTH.toInt(), Black())

  val START_PLAYER = Player(PLAYER_HITBOX, GUN)

  val game = ref[Game](Game(WINDOW, START_PLAYER, []))

  val keysPressed = emptyMap[String, Bool]()
  val mousePos = ref[Vec2d](NULL_VECTOR)
  val now = ref[Int](getTime())
  val zombieTimerMs = ref[Int](1000)

  def move(player: Player, dt: Int): Player = {
    val dV = dt * keysPressed.assembleMovement(PLAYER_SPEED)
    Player(player.drawable.move(dV), player.gun.move(dV))
  }

  def calcDt(): Int = {
    val timeElapsed = getTime() - now.get()
    now.set(getTime())
    timeElapsed
  }

  def render(deadline: IdleDeadline): Unit = {
    val dt = calcDt()
    val timeLeftToSpawn = zombieTimerMs.get - dt
    if (timeLeftToSpawn < 0) {
      game.set(game.get.spawnZombie())
      zombieTimerMs.set(timeLeftToSpawn + 1000)
    } else {
      zombieTimerMs.set(timeLeftToSpawn)
    }

    val player = game.get.player
    val movedPlayer = player.move(dt)
    val objects = game.get.objects
    val (shots, zombies) = objects.partition {
      case Shot(_, _) => true
      case Zombie(_, _) => false
    }
    val (dead, alive) = zombies.partition {
      case Zombie(zHitbox, _) =>
        shots.any {
          case Shot(sHitbox, _) => zHitbox.collides(sHitbox)
          case _ => false
        }
      case _              => false
    }
    val (usedShots, remainingShots) = shots.partition {
      case Shot(sHitbox, _) =>
        dead.any {
          case Zombie(zHitbox, _) => sHitbox.collides(zHitbox)
          case _ => false
        }
      case _ => false
    }

    val updatedObjs = remainingShots.append(alive)
    val movedObjects = updatedObjs.map {
      case Zombie(h, m) =>
        val zombieCenter = h.getCenter()
        val zombiePlayerVec = player.drawable.getCenter() - zombieCenter
        val missingAngle = angleClockwise(zombiePlayerVec) - angleClockwise(m)
        val newHitbox = Rotate(h, missingAngle, None()).collapseRotations()
        Zombie(newHitbox, m.rotate(missingAngle)).move(dt)
      case o => o.move(dt)
    }
    val movedPlayerCenter = movedPlayer.drawable.getCenter()
    val gunAngle = angleClockwise(mousePos.get - movedPlayerCenter)
    canvas {
      do clear()
      do draw(Rotate(
        Compose(Simple(movedPlayer.drawable), 
        Simple(movedPlayer.gun)), 
        gunAngle, None()
      ))
      movedObjects.foreach { o => do draw(o.getHitbox()) }
    }
    game.set(Game(game.get.window, movedPlayer, movedObjects))
    requestIdleCallback(render)
  }

  def pressedHandler(event: Event): Unit = keysPressed.update(event.getKey(), true)
  def releasedHandler(event: Event): Unit = keysPressed.update(event.getKey(), false)
  def mouseMoveHandler(event: Event): Unit = {
    val x = event.getClientX()
    val y = event.getClientY()
    mousePos.set(Vec2d(x, y))
  }

  def mouseDownHandler(event: Event): Unit = {
    val leftButtonPressed = event.getButton() == 0
    if (leftButtonPressed) {
      val player = game.get.player
      val playerCenter = player.drawable.getCenter()
      val gunAngle = angleClockwise(mousePos.get - playerCenter)
      val shotDrawable = player.gun.changeColor(Black())
      val shot = Shot(
        Rotate(Simple(shotDrawable), gunAngle, Some(playerCenter)),
        Vec2d(1.0, 0.0).rotate(gunAngle)
      )
      game.set(game.get.addObject(shot))
    }
  }

  addEventListener(KEY_DOWN, pressedHandler)
  addEventListener(KEY_UP, releasedHandler)
  addEventListener(MOUSE_MOVE, mouseMoveHandler)
  addEventListener(MOUSE_DOWN, mouseDownHandler)
  requestIdleCallback(render)
}