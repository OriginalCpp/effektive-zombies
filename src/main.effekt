module main

import mutable/map
import src/shapes/hitbox
import src/shapes/manipulated
import src/shapes/simple
import src/game/constants
import src/game/game
import src/game/gameobject
import src/game/gamestate
import src/game/player
import src/game/score
import src/ffi
import src/text
import src/utils
import src/vec2d

def main(): Unit = {
  createCanvas(GAME_WIDTH, GAME_HEIGHT)
  val displayedWidth = ref[Int](windowWidth())
  val displayedHeight = ref[Int](windowHeight())
  val ctx = ref[Context2D](resizeCanvas(displayedWidth.get, displayedHeight.get))

  def screen[T] { f: () => T / Screen }: T = {
    try { f() }
    with Screen {
      def width = resume(GAME_WIDTH)
      def height = resume(GAME_HEIGHT)
    }
  }

  val game = screen { ref[GameState](startGame()) }

  val keysPressed = emptyMap[String, Bool]()
  val mousePos = ref[Vec2d](NULL_VECTOR)
  val lastFrameTimeStamp = ref[Int](getTime())

  def timeSinceLastFrame(): Int = {
    val now = getTime()
    val timeElapsed = now - lastFrameTimeStamp.get()
    lastFrameTimeStamp.set(now)
    timeElapsed
  }

  def idleCallback(deadline: IdleDeadline): Unit = {
    with screen;
    try {
      val dt = timeSinceLastFrame()
      if (game.get.player.isAlive) {
        val updatedGame = game.get.update(dt) 
        render(updatedGame)
        game.set(updatedGame)
      } else {
        println(show(game.get.score))
        renderDeathScreen()
        val (button, text) = retryButton()
        do draw(Simple(button))
        do write(text)
      }
    } with Canvas {
      def draw(drawable) = {
        def drawSimple(d: SimpleDrawable): Unit = d match {
          case Rect(upperLeft, width, height, color) =>
            ctx.get.drawRect(
              upperLeft.x, upperLeft.y, 
              width, height, show(color)
            )
          case Circle(center, radius, color) =>
            ctx.get.drawCircle(center.x, center.y, radius, show(color))
        }

        def unwrapDraw(d: ManipulatedDrawable): Unit = d match {
          case Simple(inner) => drawSimple(inner)
          case Rotate(inner, rotation, relativeTo) =>
            val oldMatrix = ctx.get.getTransform()
            val realRelative = relativeTo.getOrElse { inner.getCenter() }
            ctx.get.setupRotation(rotation, realRelative.x, realRelative.y)
            unwrapDraw(inner)
            ctx.get.setTransform(oldMatrix)
          case Compose(first, second) =>
            unwrapDraw(first); unwrapDraw(second)
        }
        unwrapDraw(drawable)
        resume(())
      }
      def write(text) = {
        ctx.get.drawText(
          text.text, text.position.x, text.position.y,
          show(text.fontSizePX) ++ "px " ++ show(text.fontType), 
          show(text.alignment), show(text.baseline), show(text.color)
        )
        resume(())
      }
      def clear = { ctx.get.clear(); resume(()) }
    } with Input {
      def isPressed(key) = resume(keysPressed.get(key).getOrElse { false })
      def mousePos() = resume(mousePos.get)
    } with random {
      resume(random())
    }
    
    requestIdleCallback(idleCallback)
  }

  def pressedHandler(event: Event): Unit = 
    keysPressed.update(event.getKey(), true)
  def releasedHandler(event: Event): Unit = 
    keysPressed.update(event.getKey(), false)

  def mouseMoveHandler(event: Event): Unit = {
    val xRatio = GAME_WIDTH.toDouble / displayedWidth.get.toDouble 
    val yRatio = GAME_HEIGHT.toDouble / displayedHeight.get.toDouble
    val x = event.getClientX() * xRatio
    val y = event.getClientY() * yRatio
    mousePos.set(Vec2d(x, y))
  }
  def mouseDownHandler(event: Event): Unit = {
    with screen;
    val leftButtonPressed = event.getButton() == 0
    if (leftButtonPressed) {
      val player = game.get.player
      val (retryButton, _) = retryButton()
      if (player.isAlive()) {
        val playerCenter = player.drawable.getCenter()
        val gunAngle = angleClockwise(mousePos.get - playerCenter)
        val bulletDrawable = player.gun.changeColor(Black())
        val bullet = Bullet(
          Rotate(Simple(bulletDrawable), gunAngle, Some(playerCenter)),
          Vec2d(1.0, 0.0).rotate(gunAngle)
        )
        game.map{g => g.addObject(bullet)}
      } else if (mousePos.get.isInside(retryButton.toHitbox())) {
        game.set(startGame())
      }
    }
  }

  def resizeHandler(event: Event): Unit = {
    val newWidth = windowWidth()
    val newHeight = windowHeight()
    displayedWidth.set(newWidth)
    displayedHeight.set(newHeight)
    ctx.set(resizeCanvas(newWidth, newHeight))
  }

  addEventListener(KEY_DOWN, pressedHandler)
  addEventListener(KEY_UP, releasedHandler)
  addEventListener(MOUSE_MOVE, mouseMoveHandler)
  addEventListener(MOUSE_DOWN, mouseDownHandler)
  addEventListener(RESIZE, resizeHandler)

  requestIdleCallback(idleCallback)
}