module game/constants

import src/game/score
import src/game/gamestate
import src/game/gameObject
import src/game/gametimer
import src/game/player
import src/drawable/simple
import src/drawable/manipulated
import src/drawable/text
import src/drawable/hitbox
import src/utils
import src/vec2d

val ASPECT_RATIO = 16.0 / 9.0

def fittingSizes(width: Int, height: Int): (Int, Int) = {
  if(height.toDouble * ASPECT_RATIO > width.toDouble) {
    (width, (width.toDouble / ASPECT_RATIO).toInt)
  } else {
    ((height.toDouble * ASPECT_RATIO).toInt, height)
  }
}

val GAME_WIDTH = 768
val GAME_HEIGHT = (GAME_WIDTH.toDouble / ASPECT_RATIO).toInt()
val GAME_CENTER = fromInt(GAME_WIDTH / 2, GAME_HEIGHT / 2)

val SECOND_IN_MS = 1000

//------------------- Events -------------------
val KEY_DOWN = "keydown"
val KEY_UP = "keyup"
val MOUSE_MOVE = "mousemove"
val MOUSE_DOWN = "mousedown"
val MOUSE_UP = "mouseup"
val RESIZE = "resize"

//custom keys
val LEFT_CLICK = "leftclick"

//------------------- GameState -------------------
val CANVAS_PLAYER_FACTOR = 15.0
val PLAYER_START_SPEED = GAME_WIDTH.toDouble / (3 * SECOND_IN_MS).toDouble
val PLAYER_START_HEALTH = 2
val PLAYER_GUN_FACTOR = 1.2
val GUN_WIDTH_HEIGHT_FACTOR = 3.0
val PLAYER_SIZE = GAME_WIDTH / 96
val PLAYER_START_POS = GAME_CENTER
val PLAYER_HITBOX = Circle(PLAYER_START_POS, PLAYER_SIZE.toDouble, Green())
val GUN_WIDTH  = PLAYER_SIZE.toDouble / PLAYER_GUN_FACTOR
val GUN_HEIGTH = GUN_WIDTH / GUN_WIDTH_HEIGHT_FACTOR
val GUN_START_POS = PLAYER_START_POS 
                  + Vec2d(PLAYER_SIZE.toDouble - 1.0, -0.5 * GUN_HEIGTH)
val GUN = Rect(GUN_START_POS, GUN_WIDTH, GUN_HEIGTH, Black())
val START_PLAYER = Player(
  PLAYER_HITBOX,
  GUN,
  PLAYER_START_HEALTH, 
  PLAYER_START_SPEED
)

val BULLET_SPEED = GAME_WIDTH.toDouble / SECOND_IN_MS.toDouble

val ZOMBIE_WIDTH = 18.0
val ZOMBIE_HEIGHT = 20.0
val ZOMBIE_BASE_SPEED = GAME_WIDTH.toDouble / (10 * SECOND_IN_MS).toDouble

val START_WAVE = 1
val START_WAVE_TIMER = 10

val ZOMBIE_SPAWN_INTERVAL = 1 * SECOND_IN_MS

val BULLET_INTERVAL = SECOND_IN_MS / 8

val START_SCORE = Score(0, 0, 0)

val START_TIMERS = GameTimer(
  Timer(ZOMBIE_SPAWN_INTERVAL),
  Timer(START_WAVE_TIMER),
  Timer(BULLET_INTERVAL)
)

val START_MENU = Main()

val START_GAME = GameState(
  START_PLAYER, [], 
  START_TIMERS, START_WAVE,
  START_SCORE, START_MENU
)

val START_IN_GAME = START_GAME.changeMenu(InGame())

//------------------- UI -------------------
val SCORE_DIGITS = 6
val DIGIT_WIDTH = 16
val DIGIT_HEIGHT = 16
val SCORE_WIDTH = 4 * 16
val SCORE_HEIGHT = 16
val SCORE_POS = fromInt(GAME_WIDTH - SCORE_WIDTH - SCORE_DIGITS * DIGIT_WIDTH, 0)

val WAVE_DIGITS = 2
val WAVE_WIDTH = 16
val WAVE_HEIGHT = 16
val WAVE_POS = NULL_VECTOR

val COMBO_WIDTH = 16
val COMBO_HEIGHT = 16
val COMBO_POS = fromInt(GAME_WIDTH, GAME_HEIGHT) - fromInt(COMBO_WIDTH, COMBO_HEIGHT)

val HEART_WIDTH = 16
val HEART_HEIGHT = 16
val HEART_PADDING = 4
val LIFE_POS = fromInt(0, GAME_HEIGHT - HEART_HEIGHT)

type Path = String
val ASSET_PATH = "../assets/"
val SCORE_KEY = "score"
val COMBO_KEY = "combo"
val WAVE_KEY = "wave"
val HEART_KEY = "heart"
val ZOMBIE_KEY = "zombie"
val ZERO_KEY = "0"
val ONE_KEY = "1"
val TWO_KEY = "2"
val THREE_KEY = "3"
val FOUR_KEY = "4"
val FIVE_KEY = "5"
val SIX_KEY = "6"
val SEVEN_KEY = "7"
val EIGHT_KEY = "8"
val NINE_KEY = "9"
val imagesToLoad = Immutable::emptyMap[String, Path]()
                  .Immutable::update(SCORE_KEY, "score.png")
                  .Immutable::update(COMBO_KEY, "head.png")
                  .Immutable::update(WAVE_KEY, "wave.png")
                  .Immutable::update(HEART_KEY, "heart.png")
                  .Immutable::update(ZOMBIE_KEY, "zombie.png")
                  .Immutable::update(ZERO_KEY, "digit/0.png")
                  .Immutable::update(ONE_KEY, "digit/1.png")
                  .Immutable::update(TWO_KEY, "digit/2.png")
                  .Immutable::update(THREE_KEY, "digit/3.png")
                  .Immutable::update(FOUR_KEY, "digit/4.png")
                  .Immutable::update(FIVE_KEY, "digit/5.png")
                  .Immutable::update(SIX_KEY, "digit/6.png")
                  .Immutable::update(SEVEN_KEY, "digit/7.png")
                  .Immutable::update(EIGHT_KEY, "digit/8.png")
                  .Immutable::update(NINE_KEY, "digit/9.png")
                  .map { case (k, p) => (k, ASSET_PATH ++ p)}

def digitKey(digit: Int): String = digit match {
  case 0 => ZERO_KEY
  case 1 => ONE_KEY
  case 2 => TWO_KEY
  case 3 => THREE_KEY
  case 4 => FOUR_KEY
  case 5 => FIVE_KEY
  case 6 => SIX_KEY
  case 7 => SEVEN_KEY
  case 8 => EIGHT_KEY
  case _ => NINE_KEY
}

def digitImage(digit: Int): SimpleDrawable = 
  Image(
    digit.digitKey, NULL_VECTOR,
    DIGIT_WIDTH.toDouble, DIGIT_HEIGHT.toDouble,
    EMPTY_HITBOX
  )

val SCORE_IMAGE = 
  Image(
    SCORE_KEY, SCORE_POS, 
    SCORE_WIDTH.toDouble, SCORE_HEIGHT.toDouble, 
    EMPTY_HITBOX
  )

val COMBO_IMAGE = 
  Image(
    COMBO_KEY, COMBO_POS,
    COMBO_WIDTH.toDouble, COMBO_HEIGHT.toDouble,
    EMPTY_HITBOX
  )

val WAVE_IMAGE = 
  Image(
    WAVE_KEY, WAVE_POS,
    WAVE_WIDTH.toDouble, WAVE_HEIGHT.toDouble,
    EMPTY_HITBOX
  )

val HEART_IMAGE = 
  Image(
    HEART_KEY, LIFE_POS,
    HEART_WIDTH.toDouble, HEART_HEIGHT.toDouble,
    EMPTY_HITBOX
  )

val ZOMBIE_ARM_WIDTH = 12.0
val ZOMBIE_ARM_HEIGHT = 3.0
val ZOMBIE_ARM_X = 6
val ZOMBIE_TOP_ARM = 
  Rect(fromInt(ZOMBIE_ARM_X, 0), ZOMBIE_ARM_WIDTH, ZOMBIE_ARM_HEIGHT, Black())
val ZOMBIE_BOTTOM_ARM = 
  Rect(fromInt(ZOMBIE_ARM_X, 17), ZOMBIE_ARM_WIDTH, ZOMBIE_ARM_HEIGHT, Black())
val ZOMBIE_BODY = Rect(fromInt(0, 2), 16.0, 16.0, Black())
val ZOMBIE_HITBOX = 
  ZOMBIE_BODY.compose(ZOMBIE_TOP_ARM.compose(ZOMBIE_BOTTOM_ARM)).toHitbox

val DEATH_BACKGROUND = 
  Simple(Rect(NULL_VECTOR, GAME_WIDTH.toDouble, GAME_HEIGHT.toDouble, Black()))

val YOU_DIED_GAME_CENTER_OFFSET = fromInt(0, (GAME_HEIGHT / 8).neg) 
val YOU_DIED_SIZE = GAME_HEIGHT / 9 
val YOU_DIED_POS = GAME_CENTER + YOU_DIED_GAME_CENTER_OFFSET
val YOU_DIED = Text(
  "You Died",
  YOU_DIED_POS,
  YOU_DIED_SIZE,
  Serif(),
  Center(),
  Bottom(),
  Red()
)
val CANVAS_RETRY_WIDTH_FACTOR = 4.0
val CANVAS_RETRY_HEIGHT_FACTOR = 6.0
val RETRY_BUTTON_WIDTH = GAME_WIDTH.toDouble / CANVAS_RETRY_WIDTH_FACTOR
val RETRY_BUTTON_HEIGHT = GAME_HEIGHT.toDouble / CANVAS_RETRY_HEIGHT_FACTOR
val RETRY_BUTTON_CENTER = GAME_CENTER + fromInt(0, 50)
val RETRY_BUTTON = Rect(
  NULL_VECTOR, RETRY_BUTTON_WIDTH,
  RETRY_BUTTON_HEIGHT, Green()
).centerAt(RETRY_BUTTON_CENTER)

val RETRY_TEXT_WIDTH = 256.0 / CANVAS_RETRY_HEIGHT_FACTOR
val RETRY_TEXT = Text(
  "Retry", RETRY_BUTTON_CENTER, RETRY_TEXT_WIDTH.toInt(), 
  Serif(), Center(), Middle(), White()
)

val RETRY_INFO_CENTER = GAME_CENTER + 0.5 * YOU_DIED_GAME_CENTER_OFFSET
val RETRY_INFO_CENTER_PADDING = fromInt(2 * DIGIT_WIDTH, 0)
val RETRY_SCORE_POS = 
  RETRY_INFO_CENTER - RETRY_INFO_CENTER_PADDING * 0.5
                         - fromInt(DIGIT_WIDTH * SCORE_DIGITS, 0) //digits
                         - fromInt(SCORE_WIDTH, 0) //score text
val RETRY_MAX_COMBO_START_POS = 
  RETRY_INFO_CENTER + RETRY_INFO_CENTER_PADDING * 0.5

val CANVAS_EFFEKTIVE_ZOMBIES_FACTOR = 3.5
val EFFEKTIVE_ZOMBIES_SIZE = YOU_DIED_SIZE
val EFFEKTIVE_ZOMBIES_OFFSET = YOU_DIED_GAME_CENTER_OFFSET
val EFFEKTIVE_ZOMBIES = Text(
  "Effektive Zombies",
  GAME_CENTER + EFFEKTIVE_ZOMBIES_OFFSET,
  EFFEKTIVE_ZOMBIES_SIZE,
  Serif(),
  Center(),
  Middle(),
  Red()
)

val PLAY_BUTTON = RETRY_BUTTON.changeColor(Black())
val PLAY_BUTTON_CENTER = RETRY_BUTTON_CENTER
val PLAY_TEXT_SIZE = RETRY_TEXT_WIDTH
val PLAY_TEXT = Text(
  "Play", PLAY_BUTTON_CENTER, PLAY_TEXT_SIZE.toInt(),
  Serif(), Center(), Middle(), White()  
)