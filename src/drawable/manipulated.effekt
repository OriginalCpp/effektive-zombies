module drawable/manipulated

import src/drawable/hitbox
import src/drawable/simple
import src/vec2d

type ManipulatedDrawable {
  Simple(drawable: SimpleDrawable)
  Rotate(inner: ManipulatedDrawable, rotation: Double, relativeTo: Option[Vec2d])
  Compose(first: ManipulatedDrawable, second: ManipulatedDrawable)
}

def getCenter(drawable: ManipulatedDrawable): Vec2d = drawable match {
  case Simple(inner) => inner.getCenter()
  case Rotate(inner, rotation, relativeTo) =>
    val innerCenter = inner.getCenter()
    val relat = relativeTo.getOrElse { () => innerCenter }
    innerCenter.rotate(rotation, relat)
  case Compose(first, second) => first.getCenter()
}

/// Collapses neighboring ManipulatedDrawable.Rotate wrappers
/// if their relative point is the same. The returned shape describes
/// the same shape as before, just with possibly less Rotate wrappers
/// Example: 
/// collapseRotations(Rotate(Rotate(inner, 2, None()), 40, None()))
/// -> Rotate(inner, 42, None())
def collapseRotations(d: ManipulatedDrawable): ManipulatedDrawable = d match {
  case Simple(inner) => Simple(inner)
  case Rotate(Rotate(inner, innerRotation, innerRelative), rotation, relativeTo) =>
    if (innerRelative.equals(relativeTo)) 
      Rotate(inner.collapseRotations(), innerRotation + rotation, relativeTo)
    else 
      Rotate(
        Rotate(inner, innerRotation, innerRelative).collapseRotations(), 
        rotation, relativeTo
      )
  case Rotate(inner, rotation, relativeTo) => 
    Rotate(inner.collapseRotations(), rotation, relativeTo)
  case Compose(first, second) => 
    Compose(first.collapseRotations(), second.collapseRotations())
}

def move(drawable: ManipulatedDrawable, dVec: Vec2d): ManipulatedDrawable = drawable match {
  case Simple(inner) => Simple(inner.move(dVec))
  case Rotate(inner, angle, relativeTo) => 
    Rotate(inner.move(dVec), angle, relativeTo.map{v => v + dVec})
  case Compose(first, second) => Compose(first.move(dVec), second.move(dVec))
}

def toHitbox(d: ManipulatedDrawable): Hitbox = d match {
  case Simple(inner) => inner.toHitbox()
  case Rotate(inner, rotation, relativeTo) =>
    inner.toHitbox().rotate(rotation, relativeTo)
  case Compose(first, second) =>
    HCompose(first.toHitbox(), second.toHitbox())
}

def compose(s1: SimpleDrawable, s2: SimpleDrawable): ManipulatedDrawable =
  Compose(Simple(s1), Simple(s2))

def compose(s1: SimpleDrawable, m2: ManipulatedDrawable): ManipulatedDrawable =
  Compose(Simple(s1), m2)

def wrap(s1: SimpleDrawable): ManipulatedDrawable = Simple(s1)

def collides(d1: ManipulatedDrawable, d2: ManipulatedDrawable): Bool =
  collides(d1.toHitbox(), d2.toHitbox())

def setInner(d: ManipulatedDrawable, to: SimpleDrawable): ManipulatedDrawable = d match {
  case Simple(_) => Simple(to)
  case Rotate(inner, rot, rel) => Rotate(inner.setInner(to), rot, rel)
  case Compose(first, second) => Compose(first.setInner(to), second)
}

def animate(
  d: ManipulatedDrawable, dt: Int
): ManipulatedDrawable / animationFinished = d match {
  case Simple(inner) => Simple(inner.animate(dt))
  case Rotate(inner, rot, rel) => Rotate(inner.animate(dt), rot, rel)
  case Compose(first, second) => Compose(first.animate(dt), second.animate(dt))
}