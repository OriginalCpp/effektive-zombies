module game/game

import src/game/constants
import src/game/gameobject
import src/game/gamestate
import src/game/gametimer
import src/game/player
import src/game/score
import src/ffi
import src/drawable/text
import src/utils
import src/vec2d
import src/drawable/manipulated
import src/drawable/hitbox
import src/drawable/image
import src/drawable/simple

interface Canvas {
  def draw(drawable: ManipulatedDrawable): Unit
  def write(text: Text): Unit
  def drawImageWithName(name: String, pos: Vec2d): Unit
  def clear(): Unit
}

interface Input {
  def isPressed(key: String): Bool
  def mousePos(): Vec2d
}

def visible(d: ManipulatedDrawable): Bool = 
  collides(
    d, Simple(Rect(NULL_VECTOR, GAME_WIDTH.toDouble, GAME_HEIGHT.toDouble, Black()))
  )

def keepInsideScreen(player: Player): Player = {
  val screenW = GAME_WIDTH.toDouble
  val screenH = GAME_HEIGHT.toDouble
  val playerCenter = player.drawable.getCenter()
  val centerInside = Vec2d(
    playerCenter.x.clamp(0.0, screenW),
    playerCenter.y.clamp(0.0, screenH)
  )
  val adjustment = centerInside - playerCenter
  Player(
    player.drawable.move(adjustment), 
    player.gun.move(adjustment), 
    player.health,
    player.speed
  )
}

type Side {
  Top()
  Right()
  Bottom()
  Left()
}

val SIDES = [Top(), Right(), Bottom(), Left()]

def spawnZombie(game: GameState): GameObject / random = {
  val w = GAME_WIDTH.toDouble
  val h = GAME_HEIGHT.toDouble
  val totalScreenEdge = 2.0 * w + 2.0 * h
  val sideProbs = [w, h, w, h].map {side => side / totalScreenEdge}
  val spawnSide = SIDES.choose(sideProbs).getOrElse{Right()}
  val r = do random()
  val zombiePos = spawnSide match {
    case Right() => Vec2d(w, r * h)
    case Bottom() => Vec2d(r * w, h)
    case Left() => Vec2d(0.0, r * h)
    case Top() => Vec2d(r * w, 0.0)
  }
  val zombieSize = h / CANVAS_ZOMBIE_FACTOR
  val zombie = Zombie(
    Simple(Circle(zombiePos, zombieSize, Black())),
    Vec2d(ZOMBIE_BASE_SPEED, 0.0)
  )
  zombie
}

def spawnBullet(player: Player): List[GameObject] / Input = {
  if (do isPressed(LEFT_CLICK)) {
    val playerCenter = player.drawable.getCenter()
    val gunAngle = angleClockwise(do mousePos() - playerCenter)
    val bulletDrawable = player.gun.changeColor(Black())
    val bullet = Bullet(
      Rotate(Simple(bulletDrawable), gunAngle, Some(playerCenter)),
      Vec2d(BULLET_SPEED, 0.0).rotate(gunAngle)
    )
    [bullet]
  } else Nil()
}

def wasdDirection(): Vec2d / Input = {
  val wPressed = do isPressed("w") || do isPressed("W")
  val aPressed = do isPressed("a") || do isPressed("A")
  val sPressed = do isPressed("s") || do isPressed("S")
  val dPressed = do isPressed("d") || do isPressed("D")
  val xDirection = aPressed.toDouble.neg + dPressed.toDouble
  val yDirection = wPressed.toDouble.neg + sPressed.toDouble
  Vec2d(xDirection, yDirection).normalize()
}

def move(player: Player, dt: Int): Player / Input = {
  val movement = 
    player.speed * dt.toDouble * wasdDirection()
  Player(
    player.drawable.move(movement), 
    player.gun.move(movement),
    player.health,
    player.speed
  )
}

def shooting(objects: List[GameObject]): (List[GameObject], Int, Bool) = {
  val (inRange, outOfRange) = objects.partition {
    case Bullet(hitbox, _) => hitbox.visible()
    case _ => true
  }

  val (bullets, zombies) = inRange.partition {
    case Bullet(_, _) => true
    case Zombie(_, _) => false
  }

  val (bulletsThatHit, remainingBullets) = bullets.partition {
    case Bullet(sHitbox, _) =>
      zombies.any {
        case Zombie(zHitbox, _) => sHitbox.collides(zHitbox)
        case _ => false
      }
    case _ => false
  }

  val (dead, alive) = zombies.partition {
    case Zombie(zHitbox, _) =>
      bulletsThatHit.any {
        case Bullet(sHitbox, _) => zHitbox.collides(sHitbox)
        case _ => false
      }
    case _              => false
  }

  (alive.append(remainingBullets), dead.size, outOfRange.nonEmpty)
}

def update(game: GameState, dt: Int): GameState / { Input, random } = game.menu match {
  case Main() => 
    if (do isPressed(LEFT_CLICK) && do mousePos().isInside(PLAY_BUTTON.toHitbox()))
    START_IN_GAME else game
  case Retry() => 
    if (do isPressed(LEFT_CLICK) && do mousePos().isInside(RETRY_BUTTON.toHitbox())) 
    START_IN_GAME else game
  case InGame() =>
    val player = game.player
    val movedPlayer = player.move(dt)
    val objects = game.objects
    val timers = game.timers
    val wave = game.wave
    val score = game.score

    val (updatedBulletTimer, shotBullet) = 
      try { timers.bulletTimer.timer(dt, Nil[GameObject]) }
      with elapsed[List[GameObject]] {
        val bullet = spawnBullet(player)
        val timer = if (bullet.isEmpty) Timer(0) else Timer(BULLET_INTERVAL) 
        (timer, bullet)
      }

    val (remaining, deadZombies, bulletMissed) = 
      shooting(shotBullet.append(objects))

    val (damagingZombies, remainingObjects) = remaining.partition {
      case Zombie(hitbox, _) => hitbox.collides(Simple(player.drawable))
      case _ => false
    }

    val playerHealthLoss = damagingZombies.size

    val movedObjects = remainingObjects.map {
      case Zombie(h, m) =>
        val zombieCenter = h.getCenter()
        val zombiePlayerVec = player.drawable.getCenter() - zombieCenter
        val missingAngle = angleClockwise(zombiePlayerVec) - angleClockwise(m)
        val newHitbox = Rotate(h, missingAngle, None()).collapseRotations()
        Zombie(newHitbox, m.rotate(missingAngle)).move(dt)
      case o => o.move(dt)
    }

    val (updatedWaveTimer, updatedWave) = 
      try { timers.waveTimer.timer[Int](deadZombies, wave) }
      with elapsed[Int] {
        val newWave = inc(wave)
        (Timer(START_WAVE_TIMER * newWave), newWave)
      }

    val (updatedZombieTimer, spawnedZombie) = 
      try { timers.zombieTimer.timer(dt, Nil[GameObject]) }
      with elapsed[List[GameObject]] { 
        (Timer(ZOMBIE_SPAWN_INTERVAL / updatedWave), [spawnZombie(game)])
      }

    val updatedPlayer = movedPlayer.changeHealth(playerHealthLoss.neg)
                        .keepInsideScreen()
    val updatedObjects = spawnedZombie.append(movedObjects)
    val updatedTimers = 
      GameTimer(updatedZombieTimer, updatedWaveTimer, updatedBulletTimer)
    val updatedScore = score.update(playerHealthLoss > 0 || bulletMissed, deadZombies)
    val updatedMenu = if (updatedPlayer.isAlive().not) Retry() else game.menu
    GameState(
      updatedPlayer, 
      updatedObjects, 
      updatedTimers, 
      updatedWave, 
      updatedScore,
      updatedMenu
    )
}

def render(game: GameState): Unit / { Canvas, Input } = game.menu match {
  case Main() => renderMainMenu()
  case InGame() => 
    val gunAngle = 
      angleClockwise(do mousePos() - game.player.drawable.getCenter())
    do clear()
    do draw(Rotate(
      Compose(Simple(game.player.drawable),
      Simple(game.player.gun)), 
      gunAngle, None()
    ))
    game.objects.foreach { o => do draw(o.getHitbox()) }

    renderUI(game)
  case Retry() => renderDeathScreen()
}

def renderMainMenu(): Unit / Canvas = {
  do clear()
  do write(EFFEKTIVE_ZOMBIES)
  do draw(Simple(PLAY_BUTTON))
  do write(PLAY_TEXT)
}

def renderUI(game: GameState): Unit / Canvas = {
  val scoreDigits = digits(game.score.score)
  do drawImageWithName(SCORE_KEY, SCORE_POS)
  drawDigits(scoreDigits, SCORE_DIGITS, SCORE_POS + fromInt(SCORE_WIDTH, 0))

  val comboDigits = digits(game.score.combo)
  val comboDigitsSize = comboDigits.size
  do drawImageWithName(COMBO_KEY, COMBO_POS)
  drawDigits(
    comboDigits, comboDigitsSize, 
    COMBO_POS - fromInt(comboDigitsSize * DIGIT_WIDTH, 0)
  )

  val waveDigits = digits(game.wave)
  do drawImageWithName(WAVE_KEY, WAVE_POS)
  drawDigits(waveDigits, WAVE_DIGITS, WAVE_POS + fromInt(WAVE_WIDTH, 0))

  val life = game.player.health
  val hearts = fill(life, HEART_KEY)
  hearts.nextToEachOther(LIFE_POS, HEART_WIDTH + HEART_PADDING)
}

def drawDigits(rawDigits: List[Int], howMany: Int, startingWhere: Vec2d): Unit / Canvas = {
  def toName(digit: Int): String = digit match {
    case 0 => ZERO_KEY
    case 1 => ONE_KEY
    case 2 => TWO_KEY
    case 3 => THREE_KEY
    case 4 => FOUR_KEY
    case 5 => FIVE_KEY
    case 6 => SIX_KEY
    case 7 => SEVEN_KEY
    case 8 => EIGHT_KEY
    case _ => NINE_KEY
  }
  val digits = fill(howMany - rawDigits.size(), 0)
              .append(rawDigits.take(SCORE_DIGITS))
              .map{ d => d.toName }
  digits.nextToEachOther(startingWhere, DIGIT_WIDTH)
}

def nextToEachOther(imageNames: List[String], from: Vec2d, width: Int): Unit / Canvas = {
  var pos = from
  imageNames.foreach { imageName =>
    do drawImageWithName(imageName, pos)
    pos = pos + fromInt(width, 0)
  }
} 

def digits(n: Int): List[Int] = {
  var remainder = n
  var digits = Nil[Int]()
  while(remainder != 0) {
    val digit = remainder.mod(10)
    digits = Cons(digit, digits)
    remainder = remainder / 10
  }
  if (digits.isEmpty) 0.singleton else digits
}

def renderDeathScreen(): Unit / Canvas = {
  do draw(DEATH_BACKGROUND)
  do write(YOU_DIED)
  do draw(Simple(RETRY_BUTTON))
  do write(RETRY_TEXT)
}